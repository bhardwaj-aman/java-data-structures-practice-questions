package RECURSIONPRACTICE;
import java.util.*;
public class funkyChessBoard {
    public static void main(String args[]) {
        Scanner s = new Scanner(System.in);
        int a = s.nextInt();
        int[][] b  = new int[a][a];
        for(int i=0;i<a;i++){
            for(int j=0;j<a;j++){
                b[i][j] = s.nextInt();
            }
        }
        int num1s = 0;

        for(int i=0;i<b[0].length;i++) {
            for (int j = 0; j < b[0].length; j++) {
                if (b[i][j] == 1) {
                    num1s++;

                }
            }
        }
        int[][] c = new int[a][a];
        knightmove(0,0,b,c);
        int count = 0;
        for(int i=0;i<b[0].length;i++){
            for(int j=0;j<b[0].length;j++){
               if(c[i][j]==9){
                   count++;
             //      System.out.println("lol");

               }
          //     System.out.print(b[i][j]+" ");
            }
            //System.out.println("");
        }
        System.out.println(num1s-count);
    }
    public static void knightmove(int r,int c, int[][]b,int[][]d){
        if((r>b[0].length-1)||(r<0)||(c>b[0].length-1)||(c<0)){
            return;
        }
        if((b[r][c]!=1)){
            return;
        }
            d[r][c]=9;
            b[r][c]=0;
          for(int i=0;i<b[0].length;i++) {
                for (int j = 0; j < b[0].length; j++) {
                 //   System.out.print(d[i][j] + " ");

                }
              //  System.out.println("");
            }
       //         System.out.println("*****************");

        knightmove(r-2,c-1,b,d);
        knightmove(r-2,c+1,b,d);
        knightmove(r-1,c-2,b,d);
        knightmove(r-1,c+2,b,d);
        knightmove(r+1,c-2,b,d);
        knightmove(r+1,c+2,b,d);
        knightmove(r+2,c-1,b,d);
        knightmove(r+2,c+1,b,d);
   //   b[r][c]=1;
  //    d[r][c]=0;
    }
    public static boolean issafe(int[][] b, int r, int c){
        if(b[r][c]==1){
            return true;
        }
        return false;
    }
}

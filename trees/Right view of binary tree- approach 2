package trees;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;
class Max_level {

    int max_level;
}
public class treefromlevelorder {
    private class node {
        int data;
        node leftchild;
        node rightchild;

        node(node l, node r, int d) {
            this.data = d;
            this.leftchild = l;
            this.rightchild = r;
        }
    }

    private node root;

    treefromlevelorder(int r) {
        node n = new node(null, null, r);
        this.root = n;

    }

    public void treefromlevelorder(node root, Queue<node> q1, Queue<node> q2, String[] a) {
        for (int i = 1; i < a.length; i++) {
            node n = new node(null, null, Integer.parseInt(a[i]));
            q2.add(n);
        }
        q1.add(root);
        while (true) {
            if (q2.isEmpty()) {
                break;
            }
            while (q1.size() > 0) {
                node n = q1.remove();
                node p = q2.remove();
                node q = q2.remove();
                if (p.data != -1) {
                    n.leftchild = p;
                    q1.add(p);
                }
                if (q.data != -1) {
                    n.rightchild = q;
                    q1.add(q);
                }
            }
        }
    }
        public void rightview(node parent, int level, Max_level maxlevel) {
        if (parent == null) {
            return;
        }
        if (maxlevel.max_level<level ) {
      //      System.out.println("level is: "+level+" & maxlevel is: " +maxlevel);
            System.out.print(parent.data + " ");
            maxlevel.max_level=level;
        }
        rightview(parent.rightchild, level + 1,maxlevel);
        rightview(parent.leftchild, level + 1, maxlevel);

    }
    public void display(node parent) {
        System.out.print(parent.data + " ==> ");
        if (parent.leftchild != null) {
            System.out.print(parent.leftchild.data + " ==> ");
        }
        if (parent.rightchild != null) {
            System.out.print(parent.rightchild.data + " ==> ");
        }
        System.out.println("End");
        if (parent.leftchild != null) {
            display(parent.leftchild);
        }
        if (parent.rightchild != null) {
            display(parent.rightchild);
        }

    }

    public static void main(String[] args) {
        Scanner s = new Scanner(System.in);
        String str = s.nextLine();
        String[] a = str.split(" ");
        Queue<node> q1 = new LinkedList<node>();
        Queue<node> q2 = new LinkedList<node>();
        treefromlevelorder t = new treefromlevelorder(Integer.parseInt(a[0]));
        t.treefromlevelorder(t.root,q1,q2,a);
      //  Queue<node> q3 = new LinkedList<node>();
        Max_level maxlevel = new Max_level();
        t.rightview(t.root,1,maxlevel);
      //t.display(t.root);
    }
}
//1 2 3 4 5 6 -1 -1 -1 -1 -1 -1 -1
//1 2 -1 4 5 -1 6 -1 -1 -1 -1
